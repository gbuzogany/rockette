// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rkt.proto
#ifndef GRPC_rkt_2eproto__INCLUDED
#define GRPC_rkt_2eproto__INCLUDED

#include "rkt.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rkt {

class RocketteService final {
 public:
  static constexpr char const* service_full_name() {
    return "rkt.RocketteService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::rkt::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> AsyncUpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(AsyncUpdateIntDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> PrepareAsyncUpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(PrepareAsyncUpdateIntDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::rkt::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> AsyncUpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(AsyncUpdateFloatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> PrepareAsyncUpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(PrepareAsyncUpdateFloatDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::rkt::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> AsyncUpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(AsyncUpdateStringDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> PrepareAsyncUpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(PrepareAsyncUpdateStringDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::rkt::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> AsyncUpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(AsyncUpdateBytesDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>> PrepareAsyncUpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>>(PrepareAsyncUpdateBytesDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* AsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* PrepareAsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* AsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* PrepareAsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* AsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* PrepareAsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* AsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rkt::StatusResponse>* PrepareAsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::rkt::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> AsyncUpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(AsyncUpdateIntDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> PrepareAsyncUpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(PrepareAsyncUpdateIntDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::rkt::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> AsyncUpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(AsyncUpdateFloatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> PrepareAsyncUpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(PrepareAsyncUpdateFloatDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::rkt::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> AsyncUpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(AsyncUpdateStringDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> PrepareAsyncUpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(PrepareAsyncUpdateStringDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::rkt::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> AsyncUpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(AsyncUpdateBytesDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>> PrepareAsyncUpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>>(PrepareAsyncUpdateBytesDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* AsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* PrepareAsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* AsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* PrepareAsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* AsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* PrepareAsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* AsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* PrepareAsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateIntData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFloatData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateStringData_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBytesData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpdateIntData(::grpc::ServerContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response);
    virtual ::grpc::Status UpdateFloatData(::grpc::ServerContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response);
    virtual ::grpc::Status UpdateStringData(::grpc::ServerContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response);
    virtual ::grpc::Status UpdateBytesData(::grpc::ServerContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateIntData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIntData(::grpc::ServerContext* context, ::rkt::IntValue* request, ::grpc::ServerAsyncResponseWriter< ::rkt::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFloatData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFloatData(::grpc::ServerContext* context, ::rkt::FloatValue* request, ::grpc::ServerAsyncResponseWriter< ::rkt::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateStringData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStringData(::grpc::ServerContext* context, ::rkt::StringValue* request, ::grpc::ServerAsyncResponseWriter< ::rkt::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateBytesData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBytesData(::grpc::ServerContext* context, ::rkt::BytesValue* request, ::grpc::ServerAsyncResponseWriter< ::rkt::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpdateIntData<WithAsyncMethod_UpdateFloatData<WithAsyncMethod_UpdateStringData<WithAsyncMethod_UpdateBytesData<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateIntData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rkt::IntValue, ::rkt::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response) { return this->UpdateIntData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateIntData(
        ::grpc::experimental::MessageAllocator< ::rkt::IntValue, ::rkt::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rkt::IntValue, ::rkt::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateIntData(
      ::grpc::CallbackServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateIntData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateFloatData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rkt::FloatValue, ::rkt::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response) { return this->UpdateFloatData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFloatData(
        ::grpc::experimental::MessageAllocator< ::rkt::FloatValue, ::rkt::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rkt::FloatValue, ::rkt::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateFloatData(
      ::grpc::CallbackServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFloatData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateStringData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rkt::StringValue, ::rkt::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response) { return this->UpdateStringData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateStringData(
        ::grpc::experimental::MessageAllocator< ::rkt::StringValue, ::rkt::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rkt::StringValue, ::rkt::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateStringData(
      ::grpc::CallbackServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateStringData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateBytesData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::rkt::BytesValue, ::rkt::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response) { return this->UpdateBytesData(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateBytesData(
        ::grpc::experimental::MessageAllocator< ::rkt::BytesValue, ::rkt::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::rkt::BytesValue, ::rkt::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBytesData(
      ::grpc::CallbackServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBytesData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UpdateIntData<ExperimentalWithCallbackMethod_UpdateFloatData<ExperimentalWithCallbackMethod_UpdateStringData<ExperimentalWithCallbackMethod_UpdateBytesData<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UpdateIntData<ExperimentalWithCallbackMethod_UpdateFloatData<ExperimentalWithCallbackMethod_UpdateStringData<ExperimentalWithCallbackMethod_UpdateBytesData<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateIntData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFloatData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateStringData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateBytesData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateIntData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateIntData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFloatData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFloatData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateStringData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateStringData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateBytesData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBytesData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateIntData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateIntData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateIntData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateIntData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateFloatData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFloatData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateFloatData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateFloatData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateStringData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateStringData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateStringData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateStringData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateBytesData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateBytesData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateBytesData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateBytesData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateIntData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateIntData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rkt::IntValue, ::rkt::StatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rkt::IntValue, ::rkt::StatusResponse>* streamer) {
                       return this->StreamedUpdateIntData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateIntData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateIntData(::grpc::ServerContext* /*context*/, const ::rkt::IntValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateIntData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rkt::IntValue,::rkt::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFloatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFloatData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rkt::FloatValue, ::rkt::StatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rkt::FloatValue, ::rkt::StatusResponse>* streamer) {
                       return this->StreamedUpdateFloatData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateFloatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFloatData(::grpc::ServerContext* /*context*/, const ::rkt::FloatValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFloatData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rkt::FloatValue,::rkt::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateStringData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateStringData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rkt::StringValue, ::rkt::StatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rkt::StringValue, ::rkt::StatusResponse>* streamer) {
                       return this->StreamedUpdateStringData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateStringData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateStringData(::grpc::ServerContext* /*context*/, const ::rkt::StringValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateStringData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rkt::StringValue,::rkt::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBytesData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateBytesData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rkt::BytesValue, ::rkt::StatusResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::rkt::BytesValue, ::rkt::StatusResponse>* streamer) {
                       return this->StreamedUpdateBytesData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateBytesData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBytesData(::grpc::ServerContext* /*context*/, const ::rkt::BytesValue* /*request*/, ::rkt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBytesData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rkt::BytesValue,::rkt::StatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpdateIntData<WithStreamedUnaryMethod_UpdateFloatData<WithStreamedUnaryMethod_UpdateStringData<WithStreamedUnaryMethod_UpdateBytesData<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpdateIntData<WithStreamedUnaryMethod_UpdateFloatData<WithStreamedUnaryMethod_UpdateStringData<WithStreamedUnaryMethod_UpdateBytesData<Service > > > > StreamedService;
};

}  // namespace rkt


#endif  // GRPC_rkt_2eproto__INCLUDED
