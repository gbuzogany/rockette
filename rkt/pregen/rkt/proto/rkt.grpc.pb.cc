// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rkt.proto

#include "rkt.pb.h"
#include "rkt.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rkt {

static const char* RocketteService_method_names[] = {
  "/rkt.RocketteService/UpdateIntData",
  "/rkt.RocketteService/UpdateFloatData",
  "/rkt.RocketteService/UpdateStringData",
  "/rkt.RocketteService/UpdateBytesData",
};

std::unique_ptr< RocketteService::Stub> RocketteService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RocketteService::Stub> stub(new RocketteService::Stub(channel));
  return stub;
}

RocketteService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdateIntData_(RocketteService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateFloatData_(RocketteService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStringData_(RocketteService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBytesData_(RocketteService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RocketteService::Stub::UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::rkt::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateIntData_, context, request, response);
}

void RocketteService::Stub::experimental_async::UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateIntData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateIntData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateIntData(::grpc::ClientContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateIntData_, context, request, response, reactor);
}

void RocketteService::Stub::experimental_async::UpdateIntData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateIntData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::AsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateIntData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::PrepareAsyncUpdateIntDataRaw(::grpc::ClientContext* context, const ::rkt::IntValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateIntData_, context, request, false);
}

::grpc::Status RocketteService::Stub::UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::rkt::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateFloatData_, context, request, response);
}

void RocketteService::Stub::experimental_async::UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateFloatData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateFloatData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateFloatData(::grpc::ClientContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateFloatData_, context, request, response, reactor);
}

void RocketteService::Stub::experimental_async::UpdateFloatData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateFloatData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::AsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateFloatData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::PrepareAsyncUpdateFloatDataRaw(::grpc::ClientContext* context, const ::rkt::FloatValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateFloatData_, context, request, false);
}

::grpc::Status RocketteService::Stub::UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::rkt::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateStringData_, context, request, response);
}

void RocketteService::Stub::experimental_async::UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateStringData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateStringData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateStringData(::grpc::ClientContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateStringData_, context, request, response, reactor);
}

void RocketteService::Stub::experimental_async::UpdateStringData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateStringData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::AsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateStringData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::PrepareAsyncUpdateStringDataRaw(::grpc::ClientContext* context, const ::rkt::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateStringData_, context, request, false);
}

::grpc::Status RocketteService::Stub::UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::rkt::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateBytesData_, context, request, response);
}

void RocketteService::Stub::experimental_async::UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBytesData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateBytesData_, context, request, response, std::move(f));
}

void RocketteService::Stub::experimental_async::UpdateBytesData(::grpc::ClientContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBytesData_, context, request, response, reactor);
}

void RocketteService::Stub::experimental_async::UpdateBytesData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rkt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateBytesData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::AsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateBytesData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rkt::StatusResponse>* RocketteService::Stub::PrepareAsyncUpdateBytesDataRaw(::grpc::ClientContext* context, const ::rkt::BytesValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rkt::StatusResponse>::Create(channel_.get(), cq, rpcmethod_UpdateBytesData_, context, request, false);
}

RocketteService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RocketteService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RocketteService::Service, ::rkt::IntValue, ::rkt::StatusResponse>(
          [](RocketteService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rkt::IntValue* req,
             ::rkt::StatusResponse* resp) {
               return service->UpdateIntData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RocketteService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RocketteService::Service, ::rkt::FloatValue, ::rkt::StatusResponse>(
          [](RocketteService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rkt::FloatValue* req,
             ::rkt::StatusResponse* resp) {
               return service->UpdateFloatData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RocketteService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RocketteService::Service, ::rkt::StringValue, ::rkt::StatusResponse>(
          [](RocketteService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rkt::StringValue* req,
             ::rkt::StatusResponse* resp) {
               return service->UpdateStringData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RocketteService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RocketteService::Service, ::rkt::BytesValue, ::rkt::StatusResponse>(
          [](RocketteService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rkt::BytesValue* req,
             ::rkt::StatusResponse* resp) {
               return service->UpdateBytesData(ctx, req, resp);
             }, this)));
}

RocketteService::Service::~Service() {
}

::grpc::Status RocketteService::Service::UpdateIntData(::grpc::ServerContext* context, const ::rkt::IntValue* request, ::rkt::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RocketteService::Service::UpdateFloatData(::grpc::ServerContext* context, const ::rkt::FloatValue* request, ::rkt::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RocketteService::Service::UpdateStringData(::grpc::ServerContext* context, const ::rkt::StringValue* request, ::rkt::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RocketteService::Service::UpdateBytesData(::grpc::ServerContext* context, const ::rkt::BytesValue* request, ::rkt::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rkt

